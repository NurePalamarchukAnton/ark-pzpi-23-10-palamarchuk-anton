МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра «Програмна інженерія»






ЗВІТ
з практичної роботи
з дисципліни «Аналіз та рефакторінг коду»
на тему «Основні рекомендації написання коду для мови програмування С++»







Виконав:                                                           	     Перевірив:
ст. гр. ПЗПІ-23-10                                                       старший викл. Кафедри ПІ
Паламарчук А.А                                                         Сокорчук І.П.




Харків 2025
      Мета роботи
      Метою моєї роботи є ознайомлення з основними принципами написання якісного та зрозумілого коду мовою програмування C++, а також формування практичних навичок їх застосування. Я прагну показати важливість використання правил структурування коду, дотримання єдиного стилю форматування, зрозумілого іменування змінних, функцій і класів, а також грамотного застосування коментарів і документації. Це допомагає уникати типових помилок, робити код більш читабельним і надійним, полегшувати його тестування та подальшу підтримку. Крім того, мета полягає у розвитку вміння застосовувати сучасні інструменти перевірки стилю й автоматизації, що є важливим елементом підготовки майбутніх фахівців у сфері програмної інженерії.
      
      Хід Роботи
      1. Структура коду
      У C++ дуже важливо правильно організовувати проєкт, оскільки він складається з багатьох файлів. Стандартна практика передбачає використання заголовкових файлів (.h або .hpp) для оголошення класів і функцій та окремих файлів реалізації (.cpp) для їх визначення. Такий поділ дозволяє підтримувати інкапсуляцію, чітко відокремлювати інтерфейс від реалізації, що робить код більш зрозумілим і модульним. Якщо ж змішувати все в одному файлі, код швидко перетворюється на хаотичну суміш, яку складно підтримувати й розвивати.
 1
 2
 3
 4
 5
 6
 7
 8
 9
10// MathUtils.cpp
#ifndef MATHUTILS_H
#define MATHUTILS_H

class MathUtils {
public:
    static int add(int a, int b);
};

#endif
1
2
3
4
5
6// MathUtils.cpp
#include "MathUtils.h"

int MathUtils::add(int a, int b) {
return a + b;
}      
      Крім того, у C++ варто групувати класи за їхнім функціональним призначенням (наприклад, User, Database, Logger). Це дає змогу легше розширювати систему, додаючи нові можливості без необхідності переписувати великі частини коду. Правильна структура проєкту не лише спрощує підключення потрібних модулів, але й робить тестування та розширення програми значно ефективнішими.
      
1
2
3class Logger { 
    public: void log(const std::string& message); 
};
1
2
3
4
5
6class Database {
public:
    void connect() {
        std::cout << "Connecting to database..." << std::endl;
    }
};
      2. Форматування коду
      Форматування — це перше, що кидається у вічі, коли відкриваєш файл з кодом. Чіткі відступи, вирівнювання та єдиний стиль розташування дужок одразу показують, де починається й закінчується блок коду, яка вкладеність у функціях чи умовах. У великих проєктах це суттєво економить час, адже код стає передбачуваним і зрозумілим для всієї команди. Хаотичне ж форматування створює безлад і змушує витрачати зайві зусилля на розуміння логіки.
      
1
2
3
4
5
6
7// Приклад хорошого коду 
if (x > 0) {
    std::cout << "Positive\n";
}
else {
    std::cout << "Non-positive\n";
}
1
2
3
4// Приклад поганого коду 
if(x>0){
std::cout << "Positive\n"; 
}else{ std::cout << "Non-positive\n"; }
      
      У C++ зазвичай роблять відступи в межах 4 пробілів або табуляцій — головне, щоб був єдиний підхід. Це допомагає легко бачити структуру та вкладеність. Також існує кілька популярних стилів розташування дужок, серед яких найчастіше використовуються K&R та Allman. Вибір конкретного стилю не настільки важливий, як його послідовне застосування, адже саме стабільність у форматуванні забезпечує зручність роботи з кодом.
      
1
2
3
4//K&R
if (x > 0) {
    std::cout << "Positive\n";
}
1
2
3
4
5//Allman
if (x > 0)
{
    std::cout << "Positive\n";
}      
      3. Іменування
      У програмуванні часто кажуть: «код читається набагато частіше, ніж пишеться». Саме тому правильний вибір імен для змінних, функцій і класів надзвичайно важливий. У C++ поширено використовувати такі конвенції: camelCase для змінних і функцій, PascalCase для класів та UPPER_CASE для констант. Це робить код більш зрозумілим, передбачуваним і зменшує ризик плутанини.
      
 1
 2
 3
 4
 5
 6
 7
 8
 9
10//PascalCase 
class CarEngine {
public:
    void startEngine();
private:
    //camelCase
    int horsepower;
    //UPPER_CASE
    static const int MAX_RPM = 7000;
};
      
      Ім’я завжди має відображати призначення елемента. Наприклад, змінна userAge одразу пояснює свою роль, тоді як ua виглядає незрозумілою і вимагає додаткового аналізу. Варто уникати випадкових скорочень чи абревіатур без потреби, адже вони ускладнюють читання. Добре підібрані назви фактично стають короткою документацією до коду, що особливо допомагає новим розробникам швидше увійти в робочий процес.
      
1
2
3int userAge; // добре 

int ua;      // погано

      4. Коментарі
      Коментарі в коді слід використовувати розумно. Вони мають пояснювати не те, що робить код, а чому він це робить. Наприклад, якщо у функції використовується рекурсія, доцільно зазначити, чому було обрано саме такий підхід. Це допомагає іншим розробникам швидко зрозуміти логіку та архітектурні рішення.
Важливо уникати надмірних або зайвих коментарів, які лише дублюють код і створюють інформаційний шум. З іншого боку, повна відсутність пояснень може перетворити навіть добре написаний код на складну головоломку. Тому коментар має бути коротким, точним і роз’яснювати ті моменти, які без нього важко зрозуміти.
1
2
3
4
5
6//Приклад хорошого коду
// Використовуємо рекурсію, бо потрібне дерево рішень
int factorial(int n) {
   if (n <= 1) return 1;
   return n * factorial(n - 1);
}


1
2
3
4
5
6
7
8//Приклад поганого коду
// Оголошуємо функцію факторіала 
int factorial(int n) {
    // Якщо п менше або дорівнює 1, повертаємо 1 
    if (n <= 1) return 1;
    // Повертаємо п помножене на факторіал (п - 1)
    return n * factorial(n - 1); // множимо п на попереднє
}
      5. Документування коду
      Документування у C++ найчастіше виконується за допомогою системи Doxygen, яка генерує документацію безпосередньо з коментарів у коді. Це особливо корисно у великих проєктах, де над різними модулями працюють кілька розробників. Добре оформлений коментар у стилі Doxygen одразу показує, які параметри приймає функція (@param), що вона повертає (@return) і яке її призначення. Така автоматично створена документація значно економить час і робить API зрозумілішим. 
      Відсутність документації ускладнює роботу команди: іншим доводиться витрачати багато зусиль, щоб розібратися в логіці функцій, а сам автор через кілька років може забути деталі реалізації. Документування — це інвестиція в майбутнє, яка забезпечує зрозумілість і підтримуваність коду навіть через 5–10 років.
      
1
2
3
4
5
6
7/**
* @brief Обчислює суму двох чисел
* @param a перше число
* @param b друге число
* @return сума чисел
*/
int add(int a, int b);      
      6. Конвенції стилю кодування для C++
      У командній роботі часто виникають суперечки щодо стилю написання коду: хтось ставить дужки в одному рядку, хтось на новому; хтось віддає перевагу пробілам, хтось табуляціям. Щоб уникнути таких дискусій і підтримувати єдиний стиль у всьому проєкті, у C++ часто використовують інструмент ClangFormat. Він автоматично форматувує код за заданими правилами, вирівнює відступи, розставляє дужки та дозволяє обрати готовий стиль, наприклад Google чи Mozilla.
      ClangFormat легко інтегрується у популярні IDE, наприклад Visual Studio, і дозволяє програмістам зосередитися на логіці програми, а не на дрібних питаннях стилю. Без таких інструментів у великій команді швидко накопичується хаос, що ускладнює читання коду й знижує продуктивність.
      
1
2// Приклад використання ClangFormat з стилем Google 
clang-format -style=Google -i main.cpp      
      7. Кодування на основі тестування (TDD)
      Test-Driven Development (TDD) — це підхід, коли спочатку створюються тести, а вже потім реалізація. Основні етапи TDD такі: написати тест очікуваної поведінки, реалізувати код, а потім виконати його рефакторинг. Важливо дотримуватися правила «один тест — одна перевірка», щоб кожна функція мала власний набір тестів.
      У C++ для цього найчастіше використовують бібліотеки Google Test (gtest) та Catch2. Вони дозволяють автоматично перевіряти роботу функцій і класів, що робить внесення змін у код безпечнішим: якщо щось зламається, тести одразу це покажуть. TDD дисциплінує розробників, допомагає створювати продуманішу архітектуру й дає змогу швидко впевнитися в працездатності програми після змін або рефакторингу. Це особливо актуально у C++, де легко припуститися помилок із пам’яттю чи типами даних.
         
1
2
3
4
5
6
7// Використання Google Test
#include <gtest/gtest.h>
#include "MathUtils.h"

TEST(MathUtilsTest, AddPositiveNumbers) {
   EXPECT_EQ(MathUtils::add(2, 3), 5);
}
 1
 2
 3
 4
 5
 6
 7
 8
 9
10// Використання Catch2
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

int add(int a, int b) { return a + b; }

TEST_CASE("Addition works correctly") {
   REQUIRE(add(2, 3) == 5);
   REQUIRE(add(-1, 1) == 0);
}
      8. Інструменти та автоматизація для підтримки якості коду
      Якість коду у C++ можна підтримувати за допомогою статичного аналізу. Для цього використовують інструменти, такі як SonarQube, Codacy або Cppcheck, які допомагають знаходити потенційні помилки, не завжди помітні під час компіляції. Вони виявляють витоки пам’яті, небезпечні конструкції, дублікати коду та інші проблеми, що можуть призвести до багів у продакшн-версії.
      Якщо перевірки інтегрувати в CI/CD, кожен новий коміт автоматично аналізується, що значно зменшує ризик появи помилок у робочому коді. Ігнорування таких інструментів може призвести до накопичення прихованих проблем, які проявляться вже у користувача. Автоматизація статичного аналізу робить розробку більш надійною і передбачуваною.
      
1
2//Підключення Cppcheck
cppcheck --enable-all src/
      
      9. Загальні приклади оформлення коду та їх аналіз
      Найкращий спосіб зрозуміти важливість правил оформлення — це подивитися на гарні та погані приклади коду. Добре оформлений код має зрозумілі імена змінних, чіткі відступи, компактні та логічно побудовані функції. Його можна читати як звичайний текст, і навіть нова людина у команді швидко зрозуміє, що відбувається. Погано оформлений код, навпаки, часто зібраний в один рядок, має незрозумілі позначення й відсутні коментарі. У такому випадку кожна дрібна зміна може стати ризиком. Для команди це означає втрату часу на пояснення, пошук помилок і відсутність задоволення від роботи. Чистота коду прямо впливає на швидкість вирішення задач і продуктивність команди. Гарно оформлений код надихає і спрощує командну роботу, тоді як хаотичний — демотивує і гальмує розвиток проекту.
Приклад хорошого оформлення коду:

 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30#include <iostream>
#include <vector>

class Student {
public:
    Student(const std::string& name, int age)
        : name(name), age(age) {
    }

    void printInfo() const {
        std::cout << "Name: " << name
            << ", Age: " << age << std::endl;
    }

private:
    std::string name;
    int age;
};

int main() {
    std::vector<Student> group = {
        {"Anna", 20}, {"Petro", 22}, {"Olena", 21}
    };

    for (const auto& student : group) {
        student.printInfo();
    }

    return 0;
}
Плюси написання такого коду:
1. Імена зрозумілі (Student, printInfo, group).
2. Є відступи й вирівнювання.
3. Код компактний, але читається легко.
4. Єдині правила для дужок та форматування.



Приклад поганого оформлення коду :

1
2
3
4#include<iostream>
class s { public:int a; std::string n; s(std::string N, int A)
{ n = N; a = A; }void p() { std::cout << n << ":" << a; } }; int main() { s 
4 x("A", 20); x.p(); }
Мінуси написання такого коду:
1. Майже все в одному рядку → неможливо читати.
2. Клас s має нерозбірливу назву.
3. Змінні a, n — незрозумілі.
4. Відсутні відступи та коментарі.

      Висновки
      У процесі розробки програмного забезпечення мовою C++ правила оформлення коду відіграють ключову роль, адже саме вони визначають зрозумілість, підтримуваність та якість кінцевого продукту. Кожен аспект має своє значення, а разом вони формують цілісну систему, яка робить програму професійною та довговічною.
      Найперше важливо продумати структуру коду: правильна організація файлів і модулів дозволяє логічно поділити програму на частини, що значно полегшує масштабування та спільну роботу. У C++ без чіткого поділу великий проєкт швидко перетворюється на хаотичний набір файлів, тоді як грамотна архітектура забезпечує зрозумілість і порядок.
      Не менш важливим є форматування. Єдині відступи, вирівнювання та оптимальна довжина рядків роблять код читабельним і дозволяють уникати плутанини. Узгоджений стиль оформлення дужок і пробілів зменшує кількість помилок і спрощує аналіз програми.
      Суттєву роль відіграє система іменування. Лаконічні та зрозумілі назви змінних, функцій і класів роблять код самодокументованим і зрозумілим навіть для нових учасників команди. Якщо ж цього правила не дотримуватися, навіть прості програми стають важкими для сприйняття.
      Коментарі й документація доповнюють код поясненнями та описами, допомагаючи швидко розібратися в складних частинах і логіці. Коментарі мають пояснювати рішення, а не повторювати очевидне, а автоматизоване документування засобами на кшталт Doxygen створює повноцінну технічну базу знань для проєкту.
      Конвенції стилю кодування та інструменти автоматизації, такі як ClangFormat, допомагають підтримувати єдність у проєкті, усуваючи розбіжності у стилі й дозволяючи команді зосередитися на змісті коду. У свою чергу, методологія розробки через тестування (TDD) і використання інструментів статичного аналізу (Cppcheck, SonarQube) підвищують надійність і дозволяють швидко виявляти потенційні проблеми.
      Нарешті, приклади гарного й поганого оформлення доводять, наскільки серйозно правила впливають на зручність роботи. Добре структурований і оформлений код легко читати, змінювати й масштабувати, тоді як хаотичний стиль ускладнює навіть найпростіші завдання.
      Отже, правила оформлення коду в C++ охоплюють організацію структури, форматування, іменування, коментування, документування, дотримання стилю, тестування й автоматизацію перевірок. Вони взаємопов’язані та разом формують систему, яка забезпечує прозорість і зрозумілість коду, підвищує ефективність командної роботи та гарантує стабільний розвиток програмного продукту в майбутньому.
      


Додаток А
Посилання на відео на YouTube
https://youtu.be/1fuXLSWL5LA






























Додаток Б
Слайди презентації


Рисунок 1.Б – Титульний лист


Рисунок 2.Б – Вступ
      

Рисунок 3.Б – Організація проєкту та файлів


Рисунок 4.Б – Принципи логічного поділу на модулі та класи


Рисунок 5.Б – Відступи, вирівнювання та довжина рядків


Рисунок 6.Б – Стандарти для дужок та відступів


Рисунок 7.Б – Конвенції іменування


Рисунок 8.Б – Принципи вибору імен


Рисунок 9.Б – Коли та де використовувати коментарі


Рисунок 10.Б – Використання Doxygen


Рисунок 11.Б – Інструменти для перевірки стилю


Рисунок 12.Б – Основи TDD


Рисунок 13.Б – Використання статичного аналізу коду


Рисунок 14.Б – Приклад хорошого оформлення коду


Рисунок 15.Б – Приклад поганого оформлення коду


Рисунок 16.Б – Висновок

Рисунок 17.Б – Список Джерел





0

